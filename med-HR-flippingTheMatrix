#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'flippingMatrix' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY matrix as parameter.
#
# for an upperleft submatrix, find the max sum possible by
# flipping rows and columns to reposition values in the submatrix
#
# rows and columns can be flipped an infinite number of times,
# so provided a cell X reflects or opposes a cell Y in the submatrix,
# X can eventually replace Y
#
# e.g. for top left cell of matrix: check top right,
# bottom left and bottom right cells
#
# thus, for each cell in the submatrix, check reflected/opposite cells in
# other quadrants and select the maximums
#

def flippingMatrix(matrix):
    if (matrix == None) or (len(matrix) % 2 != 0):
        return 0
        
    sum = 0
    m = len(matrix)
    n = m // 2
    
    for i in range(n):
        for j in range(n):
            sum += max(matrix[i][j], matrix[i][m - 1 - j],
            matrix[m - 1 - i][j], matrix[m - 1 - i][m - 1 - j])
            
    return sum
    
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        n = int(input().strip())

        matrix = []

        for _ in range(2 * n):
            matrix.append(list(map(int, input().rstrip().split())))

        result = flippingMatrix(matrix)

        fptr.write(str(result) + '\n')

    fptr.close()
